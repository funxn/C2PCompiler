Program --> program_head program_body .
program_head --> program id ( identifier_list ) ;
identifier_list —> id temp1
program_body --> declarations
		subprogram_declarations
		compound_statement
declarations --> var declaration ; | &
declaration -->  identifier_list : type temp0
type --> standard_type
		| array [ digits..digits ] of standard_type
		| record declaretion end
standard_type --> integer
		| real
		| Boolean
		| num .. num
subprogram_declarations —> temp2
subprogram_declaration --> subprogram_head
		declarations
		compound_statement
subprogram_head --> 
		function id arguments : standard_type ;
		| procedure id arguments ;
arguments--> ( parameter_lists ) | &
parameter_lists —> parameter_list temp3
parameter_list--> VAR identifier_list : type
		| identifier_list : type
compound_statement--> begin
		optional_statements
		end
optional_statements--> statement_list | &
statement_list —> statement temp4 
statement --> variable assignop expression
		| procedure_call_statement
		| compound_statement
		| if expression then statement else statement
		| while expression do statement
		| read ( identifier_list )
		| write ( expr_list )
variable--> id | id [ expression ]
procedure_call_statement--> id
		| id ( expr_list )
expr_list —> expression temp5
expression--> simple_expr relop simple_expr
		| simple_expr
simple_expr —> term temp6 | sign term temp6
term --> factor temp7
factor --> id
		| id ( expr_list )
		| id [expression]
		| num
		| ( expression )
		| not factor
		| true
		| false
sign--> + | -
temp0 —> declaration ; identifier_list : type temp0 |&
temp1 —> , id temp1 | &
temp2 —> subprogram_declaration ; temp2 | &
temp3 -> ; parameter_list temp3 | &
temp4 —> ; statement temp4 | &
temp5 —> , expression temp5 | &
temp6 —> addop term temp6 | & 


temp7 --> mulop factor temp7 | &